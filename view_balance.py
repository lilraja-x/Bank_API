from flask import Blueprint, jsonify, request
from flask_jwt_extended import get_jwt_identity, jwt_required
from components.blocklist.blocklist import BLOCKLIST
from components.check_account_numbers import Account_Num
from components.fetching import Fetching
import jwt


balance_bp = Blueprint('balance', __name__)

check = Account_Num()


@balance_bp.route('/balance', methods=['GET'])
@jwt_required(refresh=True)
def view_balance():
    '''
    Route to do view balance of acoount

    Body:
        None
        
    Headers:
        Authorization refresh token generated by logging in the account using account number generated when account was created.
        Key(Authorization): Params(Bearer <refresh token>)

    Returns:
        The response originally is Balance of that account with account number assigned for this token with a 200 status code.

    Exception Raised:
        Following exceptions will be raised::
        --- Normal Exception Error if occurs in database querys.
        --- Exception if token has expired.

    '''
    token = request.headers.get('Authorization')
    if not token:
        return jsonify({"Message": "Missing token"}), 401

    if token in BLOCKLIST:
        return jsonify({"Message": "Token Aborted!"}), 500

    try:
        account_number = get_jwt_identity()
        fetch = Fetching(account_number)
        if account_number:
            check.check_account_number(account_number)
            try:
                return jsonify({"Message": "Balance Fetched", "Account Number": account_number, "Current Balance": "Rs. " + str(fetch.get_balance())})
            except Exception as e:
                return jsonify({"Message": "Invalid!", "Error": str(e)}), 400
    except:
        return jsonify({"Message": "Invalid token"}), 401