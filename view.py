from flask import Blueprint, jsonify, request
from flask_jwt_extended import get_jwt_identity, jwt_required
from components.blocklist.blocklist import BLOCKLIST
from model import Account, Customer
import jwt


view_bp = Blueprint('view', __name__)

@view_bp.route('/view', methods = ['GET'])
@jwt_required(refresh=True)
def view():
    '''
    Route to do view all details of acoount

    Body:
        None
        
    Headers:
        Authorization refresh token generated by logging in the account using account number generated when account was created.
        Key(Authorization): Params(Bearer <refresh token>)

    Returns:
        The response originally is all the details of account in json format with account number assigned for this token with a 200 status code.

    Exception Raised:
        Following exceptions will be raised::
        --- Normal Exception Error if occurs in database querys.
        --- Exception if no token is sent in header.
        --- Exception if token has expired.

    '''
    try:
        token = request.headers.get('Authorization')
        if not token:
            return jsonify({"Message": "Missing token"}), 401
        
        if token in BLOCKLIST:
            return jsonify({"Message": "Token Aborted!"}), 500
        try:
            account_number = get_jwt_identity()         
            account = Account.query.filter_by(account_number = account_number).first()
            customer = Customer.query.filter_by(account_number = account_number).first()
            
            data = {
                account.account_number: [
                    {
                        'Account Title': account.account_title,
                        'Account Type': account.account_type,
                        'Age': customer.age,
                        'Gender': customer.gender,
                        'Mobile Number': '+92' + str(customer.phone),
                        'Current Balance : ': account.balance
                    }
                ]
            }
            return jsonify({"Message": "Account Info Fetched!", "Account": data}), 200
        except:
            return jsonify({'Message': 'Invalid token'}), 401
    except Exception as e:
        return jsonify({"Message": "Invalid!","Error": str(e)}), 400